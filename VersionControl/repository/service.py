from repository.models import ListProjectUser, RootTree, Project
from users.models import User, Role
from common.webCommon import ResponsObject 
from datetime import datetime
from django.core.files.base import ContentFile
from files.models import Files
from statistic.models import Statistic
from issues.models import Issue

class RepositoryService():
    listProjectModel = ListProjectUser()
    userModel = User()
    responseObject = ResponsObject()
    rootTree = RootTree()
    project = Project()
    roleModel = Role()
    issuesMode = Issue()

    def getAllByUser(self, id):
        user = self.userModel.get_by_id(id)
        if user is None:
            return {"status": "FALSE", "data": "USER_NOT_FOUND"}
        
        listOfProject = self.listProjectModel.filter_by_user(user)
        if listOfProject is None:
            return {"message": "FALSE", "data": "NOT_FINDE_REPOSITORY"}
        
        if listOfProject.count() < 0:
            return {"message": "SUCCESS", "data": [] }

        return {"message": "SUCCESS", "data": self.responseObject.listProjectUserSerialize(listOfProject) }
    
    def createRepository(self, repositoryData, userData):
        user = self.userModel.get_by_id(userData['id'])
        print("1")
        print(repositoryData)
        title = 'README.md'
        text = 'Generated by GitUKS v1.0.0 on ' + str(datetime.now())
        content = ContentFile(text)
        content.name = user.username + '_' + repositoryData['projectName'] + '_master_' + title

        files = Files.objects.create(
            name=title, cover=content, dateCreate=datetime.now(), user=user)

        rootTree = self.rootTree.createRoot('master', user, files)
        typeProject = True
        if (repositoryData['type'] == 'Private'):
            typeProject = False

        project = self.project.create(
            repositoryData['projectName'], repositoryData['descriotion'], typeProject, rootTree, repositoryData['typeLicense'], repositoryData['typeLanguage'])
        
        role = self.roleModel.get_by_role_name("O")

        self.listProjectModel.create(project, user, role)

        Statistic.objects.create(
            project=project, files=files, dateCreate=datetime.now())
        
        return {"message": "SUCCESS", "project": self.responseObject.projectUserSerialize(project)}

    def getRepositoryById(self, id):
        listProject = self.listProjectModel.filter_by_id(id)
        
        project = listProject[0].project

        issues = self.issuesMode.filter_issue(project)
        projectRest = self.responseObject.projectSerialize(project, issues, listProject)

        return {"message": "SUCCESS", "project": projectRest}